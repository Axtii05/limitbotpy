from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters
import random
import datetime
import asyncpg
import nanoid
from nanoid import generate
from datetime import datetime, timedelta
import logging


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
async def init_db():
    return await asyncpg.connect(
        user='postgres.zywjihrcgdozorytmbhy', 
        password='Karypb@ev05',
        database='postgres', 
        host='aws-0-eu-central-1.pooler.supabase.com',
        port = '6543'
    )


async def save_user(connection, telegram_username, phone_number):
    query = """
    INSERT INTO users (telegram_username, phone_number) 
    VALUES ($1, $2) 
    ON CONFLICT (telegram_username) DO UPDATE 
    SET phone_number = EXCLUDED.phone_number 
    RETURNING user_id;
    """
    user_id = await connection.fetchval(query, telegram_username, phone_number)
    if user_id is None:
        raise ValueError("–û—à–∏–±–∫–∞: user_id –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    return user_id




async def save_request(connection, request_id, user_id, warehouses, delivery_type, request_date, coefficient, photo, is_paid):
    query = """
    INSERT INTO requests (request_id, user_id, warehouses, delivery_type, request_date, coefficient, photo, is_paid)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8);
    """
    await connection.execute(query, request_id, user_id, warehouses, delivery_type, request_date, coefficient, photo, is_paid)


def format_date(date_obj):
    return date_obj.strftime('%d.%m.%Y')

def get_period_range(date_period):
    today = datetime.now().date()
    
    if date_period == 'week':
        start_date = today
        end_date = start_date + timedelta(weeks=1)
    elif date_period == 'month':
        start_date = today
        end_date = start_date + timedelta(days=30)
    elif date_period == 'tomorrow':
        start_date = today + timedelta(days=1)
        end_date = start_date  
    elif date_period == 'today':
        start_date = today
        end_date = start_date  
    else:
        return "–ü–µ—Ä–∏–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω"
    
    return f"{format_date(start_date)} - {format_date(end_date)}"

warehouses_data = [
    (1, "–ü–æ–¥–æ–ª—å—Å–∫ 3", 37, 70, 80),
    (2, "–ö–æ–ª–µ–¥–∏–Ω–æ", 36, 65, 85),
    (3, "–ü–æ–¥–æ–ª—å—Å–∫", 36, 60, 90),
    (4, "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å", 35, 75, 95),
    (5, "–ê–ª–µ–∫—Å–∏–Ω (–¢—É–ª–∞)", 34, 55, 100),
    (6, "–û–±—É—Ö–æ–≤–æ 2", 28, 60, 105),
    (7, "–ë–µ–ª–∞—è –î–∞—á–∞", 26, 70, 110),
    (8, "–ë–µ–ª—ã–µ –°—Ç–æ–ª–±—ã", 10, 50, 115),
    (9, "–ö–∞–∑–∞–Ω—å", 8, 75, 120),
    (10, "–í—ë—à–∫–∏", 4, 85, 125),
    (11, "–†—è–∑–∞–Ω—å (–¢—é—à–µ–≤—Å–∫–æ–µ)", 2, 90, 130),
    (12, "–ö–æ—Ç–æ–≤—Å–∫", 2, 95, 135),
    (13, "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", 1, 100, 140),
    (14, "–ß–µ—Ö–æ–≤ 2", 1, 105, 145),
    (15, "–£—Ç–∫–∏–Ω–∞ –ó–∞–≤–æ–¥—å", 30, 110, 150),
    (16, "–ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫", 31, 115, 155),
    (17, "–ö—É–∑–Ω–µ—Ü–∫", 10, 120, 160),
    (18, "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", 39, 125, 165),
    (19, "–ò—Å–ø—ã—Ç–∞—Ç–µ–ª–µ–π", 40, 130, 170),
    (20, "–•–∞–±–∞—Ä–æ–≤—Å–∫", 21, 135, 175),
    (21, "–ú–∏–Ω—Å–∫", 30, 70, 180),
    (22, "–ê–ª–º–∞—Ç—ã –ê—Ç–∞–∫–µ–Ω—Ç", 40, 75, 185)
]

regions_data = {
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
    "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π": [15, 2, 3, 4, 5, 6, 7, 12, 8, 10, 13, 14, 9, 11, 13],
    "–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π": [9, 4, 5, 2, 7, 13, 3, 8, 18, 10, 15, 17, 11, 12, 9],
    "–Æ–∂–Ω—ã–π": [13, 19, 5, 2, 4, 15, 3, 10, 9, 8, 18, 20, 14],
    "–£—Ä–∞–ª—å—Å–∫–∏–π": [17, 9, 4, 2, 3, 7, 8, 15, 5],
    "–°–∏–±–∏—Ä—Å–∫–∏–π": [16, 17, 9, 4, 2, 5, 8, 13, 7, 15, 18, 14],
    "–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π": [18, 9, 5, 2, 16, 19, 17, 8, 14, 13, 7, 12, 15],
    "–ë–µ–ª–∞—Ä—É—Å—å": [16, 13, 2, 3, 5, 4, 8, 7, 11],
    "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": [20, 17, 9, 4, 2, 5, 18, 8, 13, 7]
}

def translate_to_russian(key, value):
    if key == 'delivery_type':
        delivery_type_translation = {
            'super_safe': '–°—É–ø–µ—Ä—Å–µ–π—Ñ',
            'box': '–ö–æ—Ä–æ–±–∞',
            'mono': '–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã',
            'qr_box': 'QR –ø–æ—Å—Ç–∞–≤–∫–∞ –∫–æ—Ä–æ–±–∞–º–∏'
        }
        return delivery_type_translation.get(value, '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
    
    if key == 'date_period':
        date_translation = {
            'today': '–°–µ–≥–æ–¥–Ω—è',
            'tomorrow': '–ó–∞–≤—Ç—Ä–∞',
            'week': '–ù–µ–¥–µ–ª—è',
            'month': '–ú–µ—Å—è—Ü'
        }
        return date_translation.get(value, value) 

    return value 

requests = {}  

def generate_request_id():
    return str (generate('0123456789', 5))

def get_warehouses_by_region(region):
    warehouse_ids = regions_data.get(region, [])
    return [wh for wh in warehouses_data if wh[0] in warehouse_ids]


async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥–±–æ—Ä —Å–∫–ª–∞–¥–æ–≤", callback_data='select_warehouses_main')],
        [InlineKeyboardButton("–¢–æ–ø —Å–∫–ª–∞–¥–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º", callback_data='top_warehouses_main')],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ª–∏–º–∏—Ç–æ–≤", callback_data='search_limits')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message: 
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–ª–∞–¥–∞–º–∏ Wildberries. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "1. –ü–æ–¥–±–æ—Ä —Å–∫–ª–∞–¥–æ–≤\n"
            "2. –¢–æ–ø —Å–∫–ª–∞–¥–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º\n" 
            "3. –ü–æ–∏—Å–∫ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    elif update.callback_query:  
        await update.callback_query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
            "1. –ü–æ–¥–±–æ—Ä —Å–∫–ª–∞–¥–æ–≤\n"
            "2. –¢–æ–ø —Å–∫–ª–∞–¥–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º\n"
            "3. –ü–æ–∏—Å–∫ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ\n\n",
            reply_markup=reply_markup
        )


async def select_warehouse_main(update: Update, context: CallbackContext):
    query = update.callback_query
    if query is None:
        return

    context.user_data['selected_count'] = 6  

    await update_warehouse_message(update, context)



async def update_warehouse_message(update: Update, context: CallbackContext):
    selected_count = context.user_data.get('selected_count', 6)
    selected_warehouses = random.sample(warehouses_data, selected_count)
    
    context.user_data['selected_warehouses'] = selected_warehouses

    message = "–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫–ª–∞–¥–æ–≤:\n"
    for warehouse in selected_warehouses:
        message += f"{warehouse[1]} - {warehouse[2]}% / {warehouse[3]}—Ä / {warehouse[4]}—Ä\n"
    
    message += "\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ 37.2 –∏–∑ 40 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ 93.0 –∏–∑ 100 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ª—É—á—à–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
    message += "–°—Ä. —Ü–µ–Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –Ω–∞ –µ–¥. —Ç–æ–≤–∞—Ä–∞ —ç—Ç–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–æ–≤:\nüì¶ –ö–æ—Ä–æ–±–∞ - 76.93—Ä\nüöö –ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç–∞ - 79.86—Ä\n"

    keyboard = [
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–ª–∞–¥–æ–≤", callback_data='change_count')],
        [InlineKeyboardButton("–ó–∞–º–µ–Ω–∏—Ç—å —Å–∫–ª–∞–¥", callback_data='replace_warehouse')],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query.message:
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
    else:
        await update.callback_query.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


async def change_count(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton(str(i), callback_data=f'count_{i}') for i in range(1, 6)],
        [InlineKeyboardButton(str(i), callback_data=f'count_{i}') for i in range(6, 10)],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query.message:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–ª–∞–¥–æ–≤:", reply_markup=reply_markup)
    else:
        await update.callback_query.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


async def count_selected(update: Update, context: CallbackContext):
    query = update.callback_query
    if query is None:
        return

    selected_count = int(query.data.split('_')[-1])
    context.user_data['selected_count'] = selected_count

    await update_warehouse_message(update, context)


async def replace_warehouse(update: Update, context: CallbackContext):
    query = update.callback_query
    if query is None:
        return
    await query.answer()  

    selected_warehouses = context.user_data.get('selected_warehouses', [])

    keyboard = [
        [InlineKeyboardButton(warehouse[1], callback_data=f'replace_{warehouse[0]}')]
        for warehouse in selected_warehouses
    ]
    keyboard.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    if query.message:
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –∑–∞–º–µ–Ω—ã:", reply_markup=reply_markup)
    else:
        await query.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


async def handle_replace_warehouse(update: Update, context: CallbackContext):
    query = update.callback_query
    if query is None:
        return
    await query.answer() 

    warehouse_id_to_replace = int(query.data.split('_')[-1])

    selected_warehouses = context.user_data.get('selected_warehouses', [])
    
    warehouse_to_replace = next((w for w in selected_warehouses if w[0] == warehouse_id_to_replace), None)
    if warehouse_to_replace is None:
        await query.answer("–û—à–∏–±–∫–∞: —Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    available_warehouses = [w for w in warehouses_data if w[0] != warehouse_id_to_replace]
    if not available_warehouses:
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã.")
        return

    new_warehouse = random.choice(available_warehouses)

    for i, warehouse in enumerate(selected_warehouses):
        if warehouse[0] == warehouse_id_to_replace:
            selected_warehouses[i] = new_warehouse
            break

    context.user_data['selected_warehouses'] = selected_warehouses

    await update_warehouse_message(update, context)



async def top_warehouses_main(update: Update, context: CallbackContext):
    query = update.callback_query
    if query is None:
        return

    context.user_data['selected_region'] = "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π"
    await update_region_message(update, context)


async def update_region_message(update: Update, context: CallbackContext):
    selected_region = context.user_data.get('selected_region', "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π")  
    warehouses = get_warehouses_by_region(selected_region) 

    message = f"–°–∫–ª–∞–¥—ã —Ä–µ–≥–∏–æ–Ω–∞ {selected_region}:\n"
    for warehouse in warehouses:
        message += f"{warehouse[1]} - {warehouse[2]}% / {warehouse[3]}—Ä / {warehouse[4]}—Ä\n"

    keyboard = []
    regions = list(regions_data.keys())
    for i in range(0, len(regions), 2):
        row = [
            InlineKeyboardButton(f"{regions[i]} {'‚úÖ' if regions[i] == selected_region else ''}", callback_data=f'region_{regions[i]}')
        ]
        if i + 1 < len(regions):
            row.append(InlineKeyboardButton(f"{regions[i+1]} {'‚úÖ' if regions[i+1] == selected_region else ''}", callback_data=f'region_{regions[i+1]}'))
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]) 
    reply_markup = InlineKeyboardMarkup(keyboard)

    current_message = update.callback_query.message.text
    if current_message != message:
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
    else:
        await update.callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")



async def region_selected(update: Update, context: CallbackContext):
    query = update.callback_query
    if query is None:
        return

    selected_region = query.data.split('_')[-1]
    context.user_data['selected_region'] = selected_region

    await update_region_message(update, context)


async def search_limits(update: Update, context: CallbackContext):
    query = update.callback_query
    if query is None:
        return

    keyboard = [[InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data='add_request')]]

    if requests:
        for request_id in requests:
            keyboard.append([InlineKeyboardButton(f"–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å {request_id}", callback_data=f'edit_request_{request_id}')])

    keyboard.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=reply_markup)


async def check_payment(connection, user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å, 
    –æ–±—Ä–∞—â–∞—è—Å—å –∫ –ø–æ–ª—é is_paid –≤ —Ç–∞–±–ª–∏—Ü–µ users.
    """
    query = """
    SELECT is_paid FROM users WHERE user_id = $1;
    """
    result = await connection.fetchrow(query, user_id)
    return result and result['is_paid']

async def add_request(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å". 
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
    """

    try:
        connection = await init_db()

        telegram_username = update.effective_user.username
        phone_number = None  # –ò–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω

        user_id = await save_user(connection, telegram_username, phone_number)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
        is_paid = await check_payment(connection, user_id)

        if is_paid:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
            context.user_data['request'] = {} 
            await create_new_request(update, context) 
        else:
            keyboard = [
                [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url='https://www.sberbank.com/sms/pbpn?requisiteNumber=9774160969&utm_campaign=sberitem_banner')],
                [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.edit_message_text(
                "–í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.",
                reply_markup=reply_markup
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")
        await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if connection:
            await connection.close()

async def get_request_from_db(connection, request_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ–≥–æ ID.
    """
    query = """
    SELECT * FROM requests 
    WHERE request_id = $1;
    """
    result = await connection.fetchrow(query, int(request_id))
    if result is None:
        raise ValueError(f"–ó–∞–ø—Ä–æ—Å —Å ID {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å context.user_data['request']
    request_data = {
        'warehouses': {wh_id: wh_name for wh_id, wh_name in zip(result['warehouses'], result['warehouses'])},  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ warehouses —Ö—Ä–∞–Ω–∏—Ç –∏ id, –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
        'delivery_type': result['delivery_type'],
        'date_period': result['request_date'],  # –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π —Å—Ö–µ–º—ã
        'acceptance_coefficient': result['coefficient']
    }

    return request_data


async def save_request_changes(connection, request_id, updated_data):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å UPDATE
        query = """
        UPDATE requests
        SET warehouses = $1, delivery_type = $2, request_date = $3, coefficient = $4
        WHERE request_id = $5;
        """

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        await connection.execute(query, 
                                updated_data['warehouses'], 
                                updated_data['delivery_type'], 
                                updated_data['date_period'], 
                                updated_data['acceptance_coefficient'], 
                                int(request_id))

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        raise  # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏


async def create_new_request(update: Update, context: CallbackContext):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤, —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç.–¥.
    """
    await select_warehouse_for_limits(update, context)  # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤

async def edit_existing_request(update: Update, context: CallbackContext):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. 
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    query = update.callback_query
    request_id = query.data.split('_')[-1]

    try:
        connection = await init_db() 
        request_data = await get_request_from_db(connection, request_id)

        context.user_data['request'] = request_data
        context.user_data['request_id'] = request_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await select_warehouse_for_limits(update, context) 

    except ValueError as e: 
        await query.answer(str(e)) 
    finally:
        if connection:
            await connection.close()
    # TODO: –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ request_id
    request_data = await get_request_from_db(connection, request_id)

    context.user_data['request'] = requests[request_id]  # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ requests
    await select_warehouse_for_limits(update, context)  # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é)

async def select_warehouse_for_limits(update: Update, context: CallbackContext):
    selected_warehouses = context.user_data.get('request', {}).get('warehouses', {})

    keyboard = []
    for i in range(0, len(warehouses_data), 2):
        row = [
            InlineKeyboardButton(f"‚úÖ {warehouses_data[i][1]}" if warehouses_data[i][0] in selected_warehouses else warehouses_data[i][1],
                                 callback_data=f"warehouse_{warehouses_data[i][0]}")]
        if i + 1 < len(warehouses_data):
            row.append(InlineKeyboardButton(f"‚úÖ {warehouses_data[i+1][1]}" if warehouses_data[i+1][0] in selected_warehouses else warehouses_data[i+1][1],
                                            callback_data=f"warehouse_{warehouses_data[i+1][0]}"))
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next_step")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏–º–∏—Ç–æ–≤:", reply_markup=reply_markup)



async def warehouse_selected(update: Update, context: CallbackContext):
    query = update.callback_query
    warehouse_id = int(query.data.split('_')[-1])
    selected_warehouses = context.user_data.get('request', {}).get('warehouses', {})

    if warehouse_id in selected_warehouses:
        del selected_warehouses[warehouse_id]
    else:
        selected_warehouses[warehouse_id] = True

    context.user_data['request']['warehouses'] = selected_warehouses

    await select_warehouse_for_limits(update, context)


async def next_step(update: Update, context: CallbackContext):
    await select_delivery_type(update, context)


async def select_delivery_type(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–°—É–ø–µ—Ä—Å–µ–π—Ñ", callback_data='delivery_super_safe')],
        [InlineKeyboardButton("–ö–æ—Ä–æ–±–∞", callback_data='delivery_box')],
        [InlineKeyboardButton("–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã", callback_data='delivery_mono')],
        [InlineKeyboardButton("QR –ø–æ—Å—Ç–∞–≤–∫–∞ –∫–æ—Ä–æ–±–∞–º–∏", callback_data='delivery_qr_box')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='search_limits')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∫–∏:", reply_markup=reply_markup)


async def delivery_type_selected(update: Update, context: CallbackContext):
    query = update.callback_query
    delivery_type = query.data.split('_')[-1]
    context.user_data['request']['delivery_type'] = delivery_type

    await select_date(update, context)


async def select_date(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data='date_today'), InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data='date_tomorrow')],
        [InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data='date_week'), InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data='date_month')],
        [InlineKeyboardButton("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç", callback_data='date_range')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='select_delivery_type')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=reply_markup)

async def date_selected(update: Update, context: CallbackContext):
    query = update.callback_query
    selected_date = query.data.split('_')[-1]

    if selected_date == 'range':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É (–î–î-–ú–ú-–ì–ì–ì–ì):")
        context.user_data['awaiting_start_date'] = True  
        return

    context.user_data['request']['date_period'] = selected_date
    await select_acceptance_coefficient(update, context)

async def handle_date_input(update: Update, context: CallbackContext):
    user_data = context.user_data

    if user_data.get('awaiting_start_date'):
        try:
            start_date = datetime.datetime.strptime(update.message.text, "%d-%m-%Y").date()
            context.user_data['start_date'] = start_date
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É (–î–î-–ú–ú-–ì–ì–ì–ì):")
            user_data['awaiting_start_date'] = False
            user_data['awaiting_end_date'] = True  
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: –î–î-–ú–ú-–ì–ì–ì–ì")
    
    elif user_data.get('awaiting_end_date'):
        try:
            end_date = datetime.datetime.strptime(update.message.text, "%d-%m-%Y").date()
            start_date = user_data.get('start_date')

            if end_date < start_date:
                await update.message.reply_text("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            else:
                user_data['request']['date_period'] = f"{start_date} - {end_date}"

                await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {start_date} - {end_date}")
                
                await select_acceptance_coefficient(update, context)

                user_data['awaiting_end_date'] = False

        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: –î–î-–ú–ú-–ì–ì–ì–ì")


async def select_acceptance_coefficient(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–¢–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è = 0", callback_data='coef_0')],
        [InlineKeyboardButton(str(i), callback_data=f'coef_{i}') for i in range(1, 6)],
        [InlineKeyboardButton(str(i), callback_data=f'coef_{i}') for i in range(6, 11)],
        [InlineKeyboardButton(str(i), callback_data=f'coef_{i}') for i in range(11, 16)],
        [InlineKeyboardButton(str(i), callback_data=f'coef_{i}') for i in range(16, 21)],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='select_date')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–µ–º–∫–∏:", reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–µ–º–∫–∏:", reply_markup=reply_markup)

async def coefficient_selected(update: Update, context: CallbackContext):
    query = update.callback_query
    coefficient = query.data.split('_')[-1]
    
    if 'request' not in context.user_data:
        context.user_data['request'] = {}
    
    context.user_data['request']['acceptance_coefficient'] = coefficient
    await confirm_request(update, context)


async def confirm_request(update: Update, context: CallbackContext):
    user_data = context.user_data.get('request', {})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if not user_data:
        await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    request_id = generate_request_id()
    requests[request_id] = user_data

    delivery_type = translate_to_russian('delivery_type', user_data.get('delivery_type', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'))
    date_period = user_data.get('date_period', '–ù–µ –≤—ã–±—Ä–∞–Ω')
    period_range = get_period_range(date_period)

    telegram_username = update.effective_user.username
    phone_number = None
    
    try:
        connection = await init_db()
        try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = await save_user(connection, telegram_username, phone_number)
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return 

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–ø–ª–∞—á–∏–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ç–∞—Ä–∏—Ñ
        paid_query = """
        SELECT is_paid FROM requests WHERE user_id = $1 AND is_paid = TRUE LIMIT 1;
        """
        result = await connection.fetchrow(paid_query, user_id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª
        if result and result['is_paid']:
            warehouses = ', '.join(list(user_data.get('warehouses', {}).values()))
            message = (
                "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:\n"
                f"üè¶ –°–∫–ª–∞–¥—ã: {warehouses}\n"
                f"üì¶ –¢–∏–ø –ø—Ä–∏–µ–º–∫–∏: {delivery_type}\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_range}\n"
                f"üí∏ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {user_data.get('acceptance_coefficient', '–ù–µ –≤—ã–±—Ä–∞–Ω')}\n\n"
                f"ID –∑–∞—è–≤–∫–∏: {request_id}\n\n"
                "–û–ø–ª–∞—Ç–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Ä–∞–Ω–µ–µ, –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
            )
            await update.callback_query.edit_message_text(message)
            await connection.close()
            return

        # –ü–æ–ª—É—á–∞–µ–º ID —Å–∫–ª–∞–¥–æ–≤ 
        warehouse_ids = list(user_data.get('warehouses', {}).keys()) 
        logging.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ warehouses: {warehouse_ids}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –Ω–µ –ø—É—Å—Ç–æ–π 
        if not warehouse_ids:
            await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç.")
            await connection.close()
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –ø–æ –∏—Ö ID
        warehouse_names = [wh[1] for wh in warehouses_data if wh[0] in warehouse_ids]
        

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∫–ª–∞–¥–æ–≤ –≤ warehouses_data
        if not warehouse_names:
            await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            await connection.close()
            return

        warehouses = ', '.join(warehouse_names)

        warehouses = warehouse_names

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å is_paid=False
        await save_request(
            connection,
            int(request_id),
            user_id,
            warehouses,  # –°—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å–∫–ª–∞–¥–æ–≤
            user_data.get('delivery_type', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'),
            datetime.now().date(),
            user_data.get('acceptance_coefficient', 0),
            None,
            False  # –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞
        )
        await update.callback_query.edit_message_text(f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –°–∫–ª–∞–¥—ã: {warehouses}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        if update.callback_query:
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞
    message = (
        "–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:\n"
        f"üè¶ –°–∫–ª–∞–¥—ã: {warehouses}\n"
        f"üì¶ –¢–∏–ø –ø—Ä–∏–µ–º–∫–∏: {delivery_type}\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_range}\n"
        f"üí∏ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {user_data.get('acceptance_coefficient', '–ù–µ –≤—ã–±—Ä–∞–Ω')}\n\n"
        f"ID –∑–∞—è–≤–∫–∏: {request_id}\n\n"
        "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."
    )

    keyboard = [
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url='https://www.sberbank.com/sms/pbpn?requisiteNumber=9774160969&utm_campaign=sberitem_banner')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(message, reply_markup=reply_markup)

    context.user_data['request_id'] = request_id
    context.user_data['awaiting_receipt'] = True

    await connection.close()


async def handle_receipt_photo(update: Update, context: CallbackContext):
    if context.user_data.get('awaiting_receipt'):
        request_id = context.user_data.get('request_id')
        user_id = context.user_data.get('user_id')  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ user_id —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≥–¥–µ-—Ç–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ

        if update.message.photo:
            photo_file = await update.message.photo[-1].get_file()
            photo_data = await photo_file.download_as_bytearray()

            connection = await init_db()

            # –û–±–Ω–æ–≤–ª—è–µ–º photo –≤ —Ç–∞–±–ª–∏—Ü–µ requests
            query = """
            UPDATE requests
            SET photo = $1
            WHERE request_id = $2
            """
            await connection.execute(query, photo_data, int(request_id))

            # –û–±–Ω–æ–≤–ª—è–µ–º is_paid –≤ —Ç–∞–±–ª–∏—Ü–µ users
            query = """
            UPDATE users
            SET is_paid = TRUE
            WHERE user_id = $1
            """
            await connection.execute(query, user_id)

            await connection.close()

            keyboard = [
                [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ {request_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–ü–æ–∏—Å–∫ –ª–∏–º–∏—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞.")
    else:
        await update.message.reply_text("–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞.")




async def edit_request(update: Update, context: CallbackContext):
    query = update.callback_query
    request_id = query.data.split('_')[-1]

    if request_id not in requests:
        await query.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    context.user_data['request'] = requests[request_id]  
    await select_warehouse_for_limits(update, context)  


async def main_menu(update: Update, context: CallbackContext):
    await start(update, context)


def main():
    application = Application.builder().token("7345975983:AAGMqp0ecosKAS9KENy4MbsHpT2cO3KOY7g").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(add_request, pattern='^add_request$'))
    application.add_handler(CallbackQueryHandler(select_warehouse_for_limits, pattern='^select_warehouses$'))
    application.add_handler(CallbackQueryHandler(warehouse_selected, pattern='^warehouse_'))
    application.add_handler(CallbackQueryHandler(next_step, pattern='^next_step$'))
    application.add_handler(CallbackQueryHandler(delivery_type_selected, pattern='^delivery_'))
    application.add_handler(CallbackQueryHandler(date_selected, pattern='^date_'))
    application.add_handler(CallbackQueryHandler(coefficient_selected, pattern='^coef_'))
    application.add_handler(CallbackQueryHandler(search_limits, pattern='^search_limits$'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date_input))
    application.add_handler(CallbackQueryHandler(edit_request, pattern='^edit_request_'))
    application.add_handler(CallbackQueryHandler(main_menu, pattern='^main_menu$'))
    application.add_handler(CallbackQueryHandler(select_warehouse_main, pattern='^select_warehouses_main$'))
    application.add_handler(CallbackQueryHandler(top_warehouses_main, pattern='^top_warehouses_main$'))
    application.add_handler(MessageHandler(filters.PHOTO, handle_receipt_photo))
    application.add_handler(CallbackQueryHandler(change_count, pattern='change_count'))
    application.add_handler(CallbackQueryHandler(replace_warehouse, pattern='replace_warehouse'))
    application.add_handler(CallbackQueryHandler(count_selected, pattern=r'count_\d+'))
    application.add_handler(CallbackQueryHandler(handle_replace_warehouse, pattern=r'replace_\d+'))
    application.add_handler(CallbackQueryHandler(region_selected, pattern=r'region_.*'))


    application.run_polling()


if __name__ == "__main__":
    main()